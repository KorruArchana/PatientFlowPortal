@model EMIS.PatientFlow.Web.ViewModel.ReportListViewModel
@using EMIS.PatientFlow.Common.Enums;

@Html.Partial("_GoogleAnalytics")

<div class="rightBlockheader">
    <div class="rightBlockHeadingContainer">
        <span class="rightBlockHeading">
            Report List
        </span>
    </div>
    <div class="rightBlockTopButtonContainer">
    </div>
</div>
<div id="grdReports" class="rightBlockContent">
    <div>
    </div>
    <table class="TFtable">
        <thead>
            <tr>
                <th>Report Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: items">
            <tr>
                <td><a href="#" data-bind="text: ReportName ,click:$parent.update"> </a></td>
            </tr>
        </tbody>
        <tfoot>
            <tr style="background-color:white;">
                <td colspan="5"><div id="paginationHolder"></div></td>
            </tr>
        </tfoot>
    </table>
</div>
@{
    int pageSize = EMIS.PatientFlow.Web.Helper.Config.PageSize;
}
<script type="text/javascript">

    var pagedViewModel = function (pageSize) {
        var self = this;
        self.items = ko.observableArray();
        self.organisationName = ko.observable('');
        self.currentPage = ko.observable(1);
        self.totalCount = ko.observable(1);
        self.pageSize = pageSize;
        self.pageCount = ko.computed(function () {
            if ((self.totalCount() % self.pageSize) == 0)
                return parseInt((self.totalCount() / self.pageSize));
            else
                return parseInt((self.totalCount() / self.pageSize)) + 1;
        });
        self.update = function (item) {
            return LoadReport(item.ReportName);
        }
        self.initialize = function () {
            self.currentPage(1);
            self.totalCount(0);
            self.items.removeAll();
            self.getData(self.currentPage());
        }

        self.getData = function (pageNumber) {
            $.ajax({
                url: '@Url.Action("GetReports","Report")',
                data: { pageNumber: pageNumber, pageSize: self.pageSize},
                type: "GET",
                success: function (data) {
                    self.items.removeAll();
                    self.currentPage(pageNumber);
                    self.totalCount(data.TotalCount);
                    if (data.ReportList.length > 0) {
                        for (i = 0; i < data.ReportList.length; i++) {
                            self.items.push(data.ReportList[i]);
                        }
                    }
                    self.createPagination();
                },
                error: function (data) {

                }
            });
        }

        self.createPagination = function () {

            $("#paginationHolder").pagination({
                pages: self.pageCount(),
                itemsOnPage: self.pageSize,
                currentPage: self.currentPage(),
                cssStyle: 'light-theme',
                onPageClick: self.loadPage
            });

        };

        self.loadPage = function (pageNo, event) {
            self.getData(pageNo);
        };

        self.initialize();
    };

 function ReportList() {
        var vm = new pagedViewModel(@pageSize);
        var element = document.getElementById('grdReports');
        ko.cleanNode(element);
        ko.applyBindings(vm, element);
 }
 ReportList();

</script>


