<Application x:Class="EMIS.PatientFlow.Kiosk.App" 
             xmlns:vm="clr-namespace:EMIS.PatientFlow.Kiosk.ViewModel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
             StartupUri="View/IndexWindow.xaml" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             d1P1:Ignorable="d"         
             Exit="App_Exit"
             xmlns:d1P1="http://schemas.openxmlformats.org/markup-compatibility/2006">
    <Application.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Converters/PassThroughConverter.xaml"/>
                <ResourceDictionary Source="/Converters/HeadingStyleConverter.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <vm:ViewModelLocator x:Key="Locator" d:IsDataSource="True" />

            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SolidColorBrush x:Key="Button.Language.Background" Color="#04BCA6" />
            <SolidColorBrush x:Key="Button.Language.Background.Pressed" Color="#08645F" />
            <SolidColorBrush x:Key="Button.Background" Color="#12A593" />
            <SolidColorBrush x:Key="Button.Background.Pressed" Color="#08645F" />
            <SolidColorBrush x:Key="HeadingTextBlock" Color="#A1E3EF" />
            <SolidColorBrush x:Key="HeadingForeground" Color="#39657B" />
            <SolidColorBrush x:Key="IncorrectHeadingTextBlockBackground" Color="#FADFDD" />
            <SolidColorBrush x:Key="IncorrectHeadingTextBlockForeground" Color="#E4655B" />
            <SolidColorBrush x:Key="GrayColor" Color="#F5F5F5" />
            <SolidColorBrush x:Key="Button.Text.White" Color="White" />
            <SolidColorBrush x:Key="Border.Text.White" Color="Black" />
            <SolidColorBrush x:Key="BlackText" Color="Black" />
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#DADADA" />
            <SolidColorBrush x:Key="DeleteButton.Disabled.Background" Color="#D8D8D8" />
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FDFDFD" />
            <!--<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />-->
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
            <!--<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />-->
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="Transparent" />
            <SolidColorBrush x:Key="Button.Disabled.RedForeground" Color="Red" />
            <SolidColorBrush x:Key="Button.Close.Background" Color="#E2574C" />
            <SolidColorBrush x:Key="Button.FinishArrival.Background" Color="#F1F1F1" />
            <SolidColorBrush x:Key="Button.FinishArrival.Foreground" Color="#39657B" />
            <SolidColorBrush x:Key="ScrollBar.Thumb.Background" Color="#CACACA" />
            <SolidColorBrush x:Key="DarkerGrayColor" Color="#393939" />
            <SolidColorBrush x:Key="LightGrayColor" Color="#535353" />
            <SolidColorBrush x:Key="SiteMap.Foreground.GrayColor" Color="#797979" />
            <SolidColorBrush x:Key="SiteMap.Header.Background" Color="#d8d8d8" />

            <BitmapImage x:Key="LanguageGlobeIcon" UriSource="/Assets/Icons/UIIcons/GlobeIcon.png" />
            <BitmapImage x:Key="HomeImageSource" UriSource="/Assets/Icons/UIIcons/Home.png" />
            <BitmapImage x:Key="BackImageSource" UriSource="/Assets/Icons/UIIcons/Back.png" />
            <BitmapImage x:Key="ArrivalBarSampleImageSource" UriSource="/Assets/Icons/UIIcons/ArrivalBarSample.png" />
            <BitmapImage x:Key="CheckBoxImageSource" UriSource="/Assets/Icons/UIIcons/CheckBox.png" />
            <BitmapImage x:Key="CheckBoxYesImageSource" UriSource="/Assets/Icons/UIIcons/CheckBox_Yes.png" />
            <BitmapImage x:Key="ArrivalDownArrowImageSource" UriSource="/Assets/Icons/UIIcons/ArrivalDownArrow.png" />
            <BitmapImage x:Key="CalenderImageSource" UriSource="/Assets/Icons/UIIcons/Calender.png" />
            <BitmapImage x:Key="ErrorCloseImageSource" UriSource="/Assets/Icons/UIIcons/Close.png" />
            <BitmapImage x:Key="CheckImageSource" UriSource="/Assets/Icons/UIIcons/Check.png" />
            <BitmapImage x:Key="RawdonHouseImageSource" UriSource="/Assets/Icons/UIIcons/Rawdon House.png" />
            <BitmapImage x:Key="StaffordHouseImageSource" UriSource="/Assets/Icons/UIIcons/Stafford House.png" />

            <BitmapImage x:Key="BackspaceImageSource" UriSource="/Assets/Icons/UIIcons/Backspace.png" />
            <BitmapImage x:Key="UpArrowImageSource" UriSource="/Assets/Icons/UIIcons/UpArrow.png" />
            <BitmapImage x:Key="UpArrowPressedImageSource" UriSource="/Assets/Icons/UIIcons/UpArrow_Pressed.png" />
            <BitmapImage x:Key="DownArrowImageSource" UriSource="/Assets/Icons/UIIcons/DownArrow.png" />
            <BitmapImage x:Key="DownArrowPressedImageSource" UriSource="/Assets/Icons/UIIcons/DownArrow_Pressed.png" />


            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="FontFamily" Value="pack://application:,,,/Assets/Fonts/#Open Sans"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="FontFamily" Value="pack://application:,,,/Assets/Fonts/#Open Sans"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>

            <Style TargetType="{x:Type Label}">
                <Setter Property="FontFamily" Value="pack://application:,,,/Assets/Fonts/#Open Sans"/>
            </Style>

            <Style x:Key="HighLightMessageStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{DynamicResource LightGrayColor}" />
                <Setter Property="FontWeight" Value="Bold" />
            </Style>

            <Style x:Key="HighLightMessageStyleRun" TargetType="{x:Type Run}">
                <Setter Property="Foreground" Value="{DynamicResource LightGrayColor}" />
                <Setter Property="FontWeight" Value="Bold" />
            </Style>

            <Style TargetType="{x:Type ListViewItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <ContentPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <StackPanel Margin="5,5,5,5" Orientation="Horizontal">
                                <Image x:Name="checkboxImage" Source="{StaticResource CheckBoxImageSource}" Width="32"/>
                                <ContentPresenter Margin="10,0,0,0"/>
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="checkboxImage" Property="Source" Value="{StaticResource CheckBoxYesImageSource}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
                <Setter Property="Background" Value="{StaticResource Button.Background}" />
                <!--<Setter Property="BorderBrush" Value="#1976d2" />-->
                <Setter Property="Foreground" Value="{StaticResource Button.Text.White}" />
                <Setter Property="FontSize" Value="{Binding SizeHelperModel.ResolutionHelper.ButtonLargeFont, Source={StaticResource Locator}}" />
                <Setter Property="FontFamily" Value="pack://application:,,,/Assets/Fonts/#Open Sans"/>
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Language.Background.Pressed}"/>
                                    <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}" />-->
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}" />
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}" />
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ArrivalByBarCodeButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="#ECECEC" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DeleteButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Polygon x:Name="polygon" StrokeLineJoin="Round" Fill="{TemplateBinding Background}" 
                                         Stroke="{TemplateBinding Background}" StrokeThickness="7">
                                        <Polygon.Points>
                                            <MultiBinding Converter ="{StaticResource PolyGonPointsConverter}">
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" Path="ActualHeight"/>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" Path="ActualWidth"/>
                                            </MultiBinding>
                                        </Polygon.Points>
                                    </Polygon>
                                    <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </Canvas>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="polygon" Value="{StaticResource DeleteButton.Disabled.Background}" />
                                    <Setter Property="Stroke" TargetName="polygon" Value="{StaticResource DeleteButton.Disabled.Background}" />
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Text.White}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="BookAndSurveyButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="Background" Value="{StaticResource Button.Text.White}" />
                <Setter Property="BorderBrush" Value="{StaticResource Button.Background}" />
                <Setter Property="Foreground" Value="{StaticResource Button.Background}" />
                <Setter Property="FontSize" Value="{Binding SizeHelperModel.ResolutionHelper.ButtonMediumFont, Source={StaticResource Locator}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="4" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Background" Value="{StaticResource Button.Language.Background.Pressed}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
                        <Setter Property="Foreground" Value="{StaticResource Button.Text.White}" />
                    </Trigger>
                </Style.Triggers>

            </Style>

            <Style x:Key="NextButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="Background" Value="{StaticResource Button.Background.Pressed}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="border" Value="Gray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="NoneButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="BorderBrush" Value="{StaticResource Button.Background}" />
                <Setter Property="Background" Value="{StaticResource Button.Text.White}" />
                <Setter Property="Foreground" Value="{StaticResource Button.Background}" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="5" 
                               SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Background.Pressed}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Background.Pressed}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Text.White}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}" />
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}" />
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>

                        </ControlTemplate>

                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Foreground" Value="{StaticResource Button.Text.White}" />
                    </Trigger>
                </Style.Triggers>

            </Style>

            <Style x:Key="ArrivalFinishButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="Background" Value="{StaticResource Button.FinishArrival.Background}" />
                <Setter Property="Foreground" Value="{StaticResource Button.FinishArrival.Foreground}" />
                <Setter Property="IsEnabled" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ErrorAppointmentButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="#d6403e" />
                <Setter Property="FontSize" Value="{Binding SizeHelperModel.ResolutionHelper.ButtonLargeFont, Source={StaticResource Locator}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="Transparent" />
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}" />
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Red" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ShowAllButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource Button.Background}" />
                <Setter Property="BorderBrush" Value="{StaticResource Button.Background}" />
                <Setter Property="FontSize" Value="{Binding SizeHelperModel.ResolutionHelper.ButtonLargeFont, Source={StaticResource Locator}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="2" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Background" Value="{StaticResource Button.Background.Pressed}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource Button.Background.Pressed}" />
                        <Setter Property="Foreground" Value="{StaticResource Button.Text.White}" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                    </Trigger>
                </Style.Triggers>

            </Style>

            <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
                <Setter Property="Background" Value="{StaticResource Button.Close.Background}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Close.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Close.Background}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="EmptyRoundButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{StaticResource Button.Background}" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FilledRoundButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource EmptyRoundButtonStyle}">
                <Setter Property="Background" Value="{StaticResource Button.Background.Pressed}" />
                <Setter Property="BorderThickness" Value="0"/>
            </Style>

            <Style x:Key="HeadingButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
                <Setter Property="Background" Value="{StaticResource HeadingTextBlock}" />
                <Setter Property="Foreground" Value="{StaticResource HeadingForeground}" />
                <Setter Property="FontSize" Value="{Binding SizeHelperModel.ResolutionHelper.ButtonLargeFont, Source={StaticResource Locator}}" />
                <Setter Property="FontFamily" Value="pack://application:,,,/Assets/Fonts/#Open Sans"/>
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                                </ContentPresenter>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="IncorrectHeadingButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource HeadingButtonStyle}">
                <Setter Property="Background" Value="{StaticResource IncorrectHeadingTextBlockBackground}" />
                <Setter Property="Foreground" Value="{StaticResource IncorrectHeadingTextBlockForeground}" />
            </Style>

            <Style x:Key="FirstAvailableAppDateTimeStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Padding" Value="0,2"/>
                <Setter Property="Foreground" Value="#08645F"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontSize" Value="{Binding SizeHelperModel.ResolutionHelper.TextBlockMediumFont, Source={StaticResource Locator}}"/>
            </Style>

            <Style x:Key="FirstAvailableAppTimeStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FirstAvailableAppDateTimeStyle}">
                <Setter Property="FontWeight" Value="SemiBold"/>
            </Style>


            <Style x:Key="FirstAvailableAppDocotorAndSlotStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Padding" Value="0,2"/>
                <Setter Property="Foreground" Value="#595959"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="FontSize" Value="{Binding SizeHelperModel.ResolutionHelper.TextBlockMediumFont, Source={StaticResource Locator}}"/>
            </Style>

            <Style x:Key="FirstAvailableAppDocotorAndSlotRunStyle" TargetType="{x:Type Run}">
                <Setter Property="Foreground" Value="#08645F"/>
                <Setter Property="FontWeight" Value="Normal"/>
            </Style>

            <ControlTemplate x:Key="TextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
                <Border Background="{TemplateBinding Background}" x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1">
                    <ScrollViewer x:Name="PART_ContentHost" />
                </Border>
            </ControlTemplate>

            <ControlTemplate x:Key="SurveyTextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
                <Border Background="{TemplateBinding Background}" x:Name="Bd" BorderBrush="#BCBCBC" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1">
                    <ScrollViewer x:Name="PART_ContentHost" />
                </Border>
            </ControlTemplate>

            <!--Brushes used in Styling of ScrollViewer-->
            <SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
            <SolidColorBrush x:Key="StandardBackgroundBrush" Color="#FFF" />
            <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
            <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
            <SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
            <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
            <SolidColorBrush x:Key="NormalBrush" Color="#888" />
            <SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
            <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#888" />
            <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />
            <LinearGradientBrush x:Key="ListBoxBackgroundBrush"
            StartPoint="0,0" EndPoint="1,0.001">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="White" Offset="0.0" />
                        <GradientStop Color="White" Offset="0.6" />
                        <GradientStop Color="#DDDDDD" Offset="1.2"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="StandardBrush"
            StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#CCC" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
            <LinearGradientBrush x:Key="PressedBrush"
            StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#BBB" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="0.1"/>
                        <GradientStop Color="#EEE" Offset="0.9"/>
                        <GradientStop Color="#FFF" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <!--SrollViewer ScrollBar Repeat Buttons (at each end)-->
            <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="FontSize" Value="50"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Name="Border"
                            CornerRadius="0"
                            Margin="1"
                            Background="{StaticResource Button.Background}"
                            BorderBrush="{StaticResource Button.Text.White}"
                            BorderThickness="0">
                                <Path HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Stroke="{StaticResource Button.Text.White}"
                              StrokeThickness="3"
                              Fill="{StaticResource Button.Text.White}"
                              Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource Button.Background.Pressed}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledForegroundBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--SrollViewer ScrollBar Repeat Buttons (The part in the middle,not the thumb the long area between the buttons )-->
            <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ScrollViewer ScrollBar Thumb, that part that can be dragged up/down or left/right Buttons-->
            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Background" Value="{StaticResource ScrollBar.Thumb.Background}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border CornerRadius="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--VerticalScrollBar Template using the previously created Templates-->
            <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition MaxHeight="50"/>
                        <RowDefinition Height="0.00001*"/>
                        <RowDefinition MaxHeight="50"/>
                    </Grid.RowDefinitions>
                    <Border Grid.RowSpan="3" CornerRadius="2" Background="#F0F0F0" />
                    <RepeatButton x:Name="Up" Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="50"
                                  Command="ScrollBar.LineUpCommand"
                                  Content="M 0 4 L 8 4 L 4 0 Z"/>
                    <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{StaticResource ScrollBarThumb}"
                                   Margin="1,0,1,0"
                                   Background="{StaticResource ScrollBar.Thumb.Background}"
                                   BorderBrush="{StaticResource ScrollBar.Thumb.Background}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>

                    <RepeatButton x:Name="Down" Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="50"
                                  Command="ScrollBar.LineDownCommand"
                                  Content="M 0 0 L 4 4 L 8 0 Z" />
                </Grid>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}, Path=VerticalOffset}" Value="0">
                        <Setter TargetName="Up" Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter ="{StaticResource isOnBottomConverter}">
                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}" Path="VerticalOffset"/>
                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}" Path="ScrollableHeight"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter TargetName="Down" Property="IsEnabled" Value="False" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--HorizontalScrollBar Template using the previously created Templates-->
            <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
                <Grid >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MaxWidth="18"/>
                        <ColumnDefinition Width="0.00001*"/>
                        <ColumnDefinition MaxWidth="18"/>
                    </Grid.ColumnDefinitions>
                    <Border Grid.ColumnSpan="3" CornerRadius="2" Background="#F0F0F0" />
                    <RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" 
                          Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
                    <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageLeftCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1"
                           Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18"
                          Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
                </Grid>
            </ControlTemplate>

            <!--Style for overall  ScrollBar-->
            <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="Height" Value="50" />
                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="50"/>
                        <Setter Property="Height" Value="Auto" />
                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--Style for overall  ScrollViewer-->
            <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <ScrollContentPresenter Grid.Column="0"/>

                                <ScrollBar Name="PART_VerticalScrollBar" 
                                   Grid.Row="0" Grid.Column="1"
                                   Style="{DynamicResource ScrollBarStyle}"
                                   Value="{TemplateBinding VerticalOffset}" 
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1" Grid.Column="1"
                                   Style="{DynamicResource ScrollBarStyle}"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DoctorSelectionScrollBarLineButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="FontSize" Value="50"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Name="Border"
                            CornerRadius="0"
                            Margin="2"
                            Background="{StaticResource Button.Background}"
                            BorderBrush="{StaticResource Button.Text.White}"
                            BorderThickness="0">
                                <TextBlock HorizontalAlignment="Center"
                                           VerticalAlignment="Bottom"
                                           TextAlignment="Center"
                                           Foreground="{StaticResource Button.Text.White}"
                                           FontWeight="Bold"
                                           Text="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource Button.Background.Pressed}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledForegroundBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="DoctorSelectionVerticalScrollBar" TargetType="{x:Type ScrollBar}">
                <Grid Background="White">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="2"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <RepeatButton x:Name="Down" Grid.Column="0" Style="{DynamicResource DoctorSelectionScrollBarLineButton}" 
                                  Margin="5,5,1,5" Command="ScrollBar.LineDownCommand" 
                                  Content="&#9013;">
                    </RepeatButton>

                    <RepeatButton x:Name="Up" Grid.Column="2" Style="{DynamicResource DoctorSelectionScrollBarLineButton}" 
                                  Margin="1,5,5,5" Command="ScrollBar.LineUpCommand"
                                  Content="&#9013;" RenderTransformOrigin="0.5,0.5">
                        <RepeatButton.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="-180"/>
                            </TransformGroup>
                        </RepeatButton.RenderTransform>
                    </RepeatButton>
                </Grid>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}, Path=VerticalOffset}" Value="0">
                        <Setter TargetName="Up" Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter ="{StaticResource isOnBottomConverter}">
                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}" Path="VerticalOffset"/>
                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}" Path="ScrollableHeight"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter TargetName="Down" Property="IsEnabled" Value="False" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--Style for DoctorSelection  ScrollBar-->
            <Style x:Key="DoctorSelectionScrollBarStyle" TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="Height" Value="50" />
                        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="Height" Value="60" />
                        <Setter Property="Template" Value="{DynamicResource DoctorSelectionVerticalScrollBar}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--Style for DoctorSelection ScrollViewer-->
            <Style x:Key="DoctorSelectionScrollViewer" TargetType="{x:Type ScrollViewer}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <ScrollContentPresenter Grid.Column="0"/>

                                <ScrollBar Name="PART_VerticalScrollBar" 
                                               Grid.Row="1" Grid.Column="0"
                                               Style="{DynamicResource DoctorSelectionScrollBarStyle}"
                                               Value="{TemplateBinding VerticalOffset}" 
                                               Maximum="{TemplateBinding ScrollableHeight}"
                                               ViewportSize="{TemplateBinding ViewportHeight}"
                                               Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                <ScrollBar Name="PART_HorizontalScrollBar"
                                               Orientation="Horizontal"
                                               Grid.Row="0" Grid.Column="1"
                                               Style="{DynamicResource DoctorSelectionScrollBarStyle}"
                                               Value="{TemplateBinding HorizontalOffset}"
                                               Maximum="{TemplateBinding ScrollableWidth}"
                                               ViewportSize="{TemplateBinding ViewportWidth}"
                                               Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


        </ResourceDictionary>

    </Application.Resources>
</Application>